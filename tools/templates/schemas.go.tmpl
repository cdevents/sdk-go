// Code generated by tools/generator. DO NOT EDIT.
{{if .IsTestData}}
//go:build testonly
{{end}}

/*
Copyright 2024 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import (
{{- if not .IsTestData}}
  "fmt"
{{- end}}
  "encoding/json"

  jsonschema "github.com/santhosh-tekuri/jsonschema/v6"
)

{{- if not .IsTestData}}
type SchemaDB map[string]*jsonschema.Schema
{{- end}}

var (
    // Schema compiler, with schemas preloaded
    {{if .IsTestData}}testC{{else}}c{{end}}ompiler *jsonschema.Compiler

    // All compiled schemas by Id
    {{if .IsTestData}}Test{{end}}CompiledSchemas SchemaDB

    {{- if not .IsTestData}}
    // All compiled custom schemas by Id
    CompiledCustomSchemas SchemaDB
    {{- end }}

    // All schemas as string by Id
    {{if .IsTestData}}Test{{end}}SchemasById = map[string]string{
{{- range $id, $data := .Data }}
    "{{ $id }}": `{{ printf "%s" $data }}`,
{{- end }}
}
)

func init() {
  var err error
  {{if .IsTestData}}testC{{else}}c{{end}}ompiler, err = new{{if .IsTestData}}Test{{end}}JsonSchemaCompiler()
  panicOnError(err)
  {{if .IsTestData}}Test{{end}}CompiledSchemas = make(map[string]*jsonschema.Schema)
  {{- if .IsTestData}}
  // For tests load non-test schemas first to cover links and custom
  for url := range SchemasById {
    sch, err := {{if .IsTestData}}testC{{else}}c{{end}}ompiler.Compile(url)
    panicOnError(err)
    TestCompiledSchemas[url] = sch
  }
  {{- end}}
  for url := range {{if .IsTestData}}Test{{end}}SchemasById {
    sch, err := {{if .IsTestData}}testC{{else}}c{{end}}ompiler.Compile(url)
    panicOnError(err)
    {{if .IsTestData}}Test{{end}}CompiledSchemas[url] = sch
  }
  {{- if not .IsTestData}}
  CompiledCustomSchemas = make(map[string]*jsonschema.Schema)
  {{- end }}
}

{{- if not .IsTestData}}
func (db SchemaDB) GetBySpecSubjectPredicate(specVersion, subject, predicate, custom string) (string, *jsonschema.Schema, error) {
  id := ""
  if custom == "" && subject != "" && predicate != "" {
    id = fmt.Sprintf(CDEventsSchemaURLTemplate, specVersion, subject, predicate)
  } else {
    id = fmt.Sprintf(CDEventsCustomSchemaURLTemplate, specVersion)
  }
  if schemaString, found := db[id]; found {
    return id, schemaString, nil
  }
  return "", nil, fmt.Errorf("event %s/%s not found for spec %s in local schema DB", specVersion, subject, predicate)
}
{{- end}}

func new{{if .IsTestData}}Test{{end}}JsonSchemaCompiler() (*jsonschema.Compiler, error) {
  {{- if .IsTestData}}
  c, err := newJsonSchemaCompiler()
  if err != nil {
    return nil, err
  }
  {{- else}}
  c := jsonschema.NewCompiler()
  {{- end}}
  for url, content := range {{if .IsTestData}}Test{{end}}SchemasById {
    var loaded map[string]interface{}
    err := json.Unmarshal([]byte(content), &loaded)
    if err != nil {
      return nil, err
    }
    if err:=c.AddResource(url, loaded); err!=nil {
        return nil, err
    }
  }
  return c, nil
}

{{- if not .IsTestData}}
// LoadJsonSchema compiles and loads a JSON schema in []byte format into the sdk
// custom JSON schema databased. Returns an error if the schema cannot be compiled.
// If the schemaId already exists, the previous schema definition is overwritten.
func LoadJsonSchema(schemaId string, schema []byte) error {
  var loaded map[string]interface{}
  err := json.Unmarshal(schema, &loaded)
  if err != nil {
    return err
  }
  if err := {{if .IsTestData}}testC{{else}}c{{end}}ompiler.AddResource(schemaId, loaded); err != nil {
    return err
  }
  sch, err := {{if .IsTestData}}testC{{else}}c{{end}}ompiler.Compile(schemaId)
  if err != nil {
    return err
  }
  CompiledCustomSchemas[schemaId] = sch
  return nil
}
{{- end }}