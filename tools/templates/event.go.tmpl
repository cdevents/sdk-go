// Code generated by tools/generator. DO NOT EDIT.
{{if .IsTestData}}
//go:build testonly
{{end}}

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import (
{{- if ne .SpecVersion "0.3.0" }}
  "fmt"
{{- end }}
  "time"

  jsonschema "github.com/santhosh-tekuri/jsonschema/v6"
)

var (
	// {{.Subject}}{{.Predicate}} event type v{{.Version}}
	{{.Subject}}{{.Predicate}}EventTypeV{{.VersionName}} CDEventType = CDEventType{
{{- if not .IsCustom }}
		Subject:   "{{.SubjectLower}}",
		Predicate: "{{.PredicateLower}}",
		Version:   "{{.Version}}",
{{- else -}}
{{- end }}
	}
)

{{- if not .IsCustom }}
type {{.Subject}}{{.Predicate}}SubjectContentV{{.VersionName}}  struct{
{{ range $i, $field := .Contents }}
	{{ .Name }} {{ .Type }} `json:"{{ .NameLower }}{{ if not .Required }},omitempty{{ end }}"{{ if eq .Name "ArtifactId" }} validate:"purl"{{ end }}`
{{ end }}
}
{{- end }}

type {{.Subject}}{{.Predicate}}SubjectV{{.VersionName}} struct {
	SubjectBase
	Content {{if .IsCustom }}interface{}{{ else }}{{.Subject}}{{.Predicate}}SubjectContentV{{.VersionName}}{{ end }} `json:"content"`
}

func (sc {{.Subject}}{{.Predicate}}SubjectV{{.VersionName}}) GetSubjectType() SubjectType {
{{- if not .IsCustom }}
	return "{{.SubjectType}}"
{{- else }}
	return sc.Type
{{- end }}
}

type {{.Subject}}{{.Predicate}}EventV{{.VersionName}} struct {
{{- if eq .SpecVersion "0.3.0"}}
	Context Context                    `json:"context"`
{{- else}}
	Context ContextV04                 `json:"context"`
{{- end}}
	Subject {{.Subject}}{{.Predicate}}SubjectV{{.VersionName}} `json:"subject"`
	CDEventCustomData
}

// CDEventsReader implementation

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetType() CDEventType {
	return {{.Subject}}{{.Predicate}}EventTypeV{{.VersionName}}
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetVersion() string {
	return e.Context.GetVersion()
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetId() string {
	return e.Context.Id
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSource() string {
	return e.Context.Source
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetTimestamp() time.Time {
	return e.Context.Timestamp
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSubjectId() string {
	return e.Subject.Id
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSubjectSource() string {
	return e.Subject.Source
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSubject() Subject {
	return e.Subject
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetCustomData() (interface{}, error) {
	return GetCustomData(e.CustomDataContentType, e.CustomData)
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetCustomDataAs(receiver interface{}) error {
	return GetCustomDataAs(e, receiver)
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetCustomDataRaw() ([]byte, error) {
	return GetCustomDataRaw(e.CustomDataContentType, e.CustomData)
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetCustomDataContentType() string {
	return e.CustomDataContentType
}

{{- if ne .SpecVersion "0.3.0"}}
// CDEventsReaderV04 implementation

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetChainId() string {
	return e.Context.ChainId
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetLinks() EmbeddedLinksArray {
	return e.Context.Links
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSchemaUri() string {
	return e.Context.SchemaUri
}

// GetCustomSchema looks up the SchemaUri, if any is defined. If none is defined, it returns nil.
// If it's defined and cannot be found, it returns an error.
func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetCustomSchema() (*jsonschema.Schema, error) {
	schemaUri := e.GetSchemaUri()
	if schemaUri == "" {
		return nil, nil
	}
	schema, found := CompiledCustomSchemas[schemaUri]
	if ! found {
		return nil, fmt.Errorf("schema with id %s could not be found in the local registry", schemaUri)
	}
	return schema, nil
}
{{- end}}

// CDEventsWriter implementation

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetId(id string) {
	e.Context.Id = id
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetSource(source string) {
	e.Context.Source = source
	// Default the subject source to the event source
	if e.Subject.Source == "" {
		e.Subject.Source = source
	}
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetTimestamp(timestamp time.Time) {
	e.Context.Timestamp = timestamp
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetSubjectId(subjectId string) {
	e.Subject.Id = subjectId
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetSubjectSource(subjectSource string) {
	e.Subject.Source = subjectSource
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetCustomData(contentType string, data interface{}) error {
	err := CheckCustomData(contentType, data)
	if err != nil {
		return err
	}
	e.CustomData = data
	e.CustomDataContentType = contentType
	return nil
}

func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSchema() (string, *jsonschema.Schema, error) {
	eType := e.GetType()
	return 	{{if .IsTestData }}Test{{end}}CompiledSchemas.GetBySpecSubjectPredicate("{{.SpecVersion}}", eType.Subject, eType.Predicate, eType.Custom)
}

{{- if ne .SpecVersion "0.3.0"}}
// CDEventsWriterV04 implementation

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetChainId(chainId string) {
	e.Context.ChainId = chainId
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetLinks(links EmbeddedLinksArray) {
	e.Context.Links = links
}

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetSchemaUri(schema string) {
	e.Context.SchemaUri = schema
}
{{- end}}


func (e {{.Subject}}{{.Predicate}}EventV{{.VersionName}}) GetSubjectContent() interface{} {
	return e.Subject.Content
}

{{- if .IsCustom }}
// CustomCDEventWriter implementation

func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetEventType(eventType CDEventType) {
	e.Context.Type = eventType
	e.Subject.Type = SubjectType(eventType.FQSubject())
}

// CustomCDEvent types can have different subject fields
func (e *{{.Subject}}{{.Predicate}}EventV{{.VersionName}}) SetSubjectContent(subjectContent interface{}) {
	e.Subject.Content = subjectContent
}
{{- end }}

{{- if gt (len .Contents) 0 }}
// Set subject custom fields
{{- end }}
{{ range $i, $field := .Contents }}
func (e *{{$.Subject}}{{$.Predicate}}EventV{{$.VersionName}}) SetSubject{{ .Name }}({{ .NameLower }} {{ .Type }}) {
	e.Subject.Content.{{ .Name }} = {{ .NameLower }}
}
{{ end }}

// New creates a new {{.Subject}}{{.Predicate}}EventV{{.VersionName}}
func New{{.Subject}}{{.Predicate}}EventV{{.VersionName}}(specVersion string) (*{{.Subject}}{{.Predicate}}EventV{{.VersionName}}, error) {
	e := &{{.Subject}}{{.Predicate}}EventV{{.VersionName}}{
{{- if eq .SpecVersion "0.3.0"}}
		Context: Context{
			Type:    {{.Subject}}{{.Predicate}}EventTypeV{{.VersionName}},
			Version: specVersion,
{{- else}}
		Context: ContextV04{
			Context{
				Type:    {{.Subject}}{{.Predicate}}EventTypeV{{.VersionName}},
				Version: specVersion,
			},
			ContextLinks{},
			ContextCustom{},
{{- end}}
		},
		Subject: {{.Subject}}{{.Predicate}}SubjectV{{.VersionName}}{
			SubjectBase: SubjectBase{
				Type: "{{.SubjectType}}",
			},
		},
	}
	{{if .IsTestData -}}
	// Pre-seeded with test data
	t, _ := time.Parse(time.RFC3339Nano, "2023-03-20T14:27:05.315384Z")
	e.SetTimestamp(t)
	e.SetId("271069a8-fc18-44f1-b38f-9d70a1695819")
	{{- else -}}
	_, err := initCDEvent(e)
	if err != nil {
		return nil, err
	}
	{{- end}}
	return e, nil
}

{{ range $i, $type := .ContentTypes }}
// {{$.Subject}}{{$.Predicate}}SubjectContent{{ .Name }}V{{$.VersionName}} holds the content of a {{ .Name }} field in the content
type {{$.Subject}}{{$.Predicate}}SubjectContent{{ .Name }}V{{$.VersionName}} struct{
{{ range $j, $field := .Fields }}
	{{ .Name }} {{ .Type }} `json:"{{ .NameLower }}{{ if not .Required }},omitempty{{ end }}"`
{{ end }}
}
{{ end }}