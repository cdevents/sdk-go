// Code generated by tools/generator. DO NOT EDIT.

//go:build testonly

/*
Copyright 2024 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import (
	"encoding/json"

	jsonschema "github.com/santhosh-tekuri/jsonschema/v6"
)

var (
	// Schema compiler, with schemas preloaded
	testCompiler *jsonschema.Compiler

	// All compiled schemas by Id
	TestCompiledSchemas SchemaDB

	// All schemas as string by Id
	TestSchemasById = map[string]string{
		"https://cdevents.dev/99.0.0/schema/foosubject-barpredicate-event": `{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://cdevents.dev/99.0.0/schema/foosubject-barpredicate-event",
	"properties": {
	  "context": {
		"properties": {
		  "version": {
			"type": "string",
			"minLength": 1
		  },
		  "id": {
			"type": "string",
			"minLength": 1
		  },
		  "source": {
			"type": "string",
			"minLength": 1,
			"format": "uri-reference"
		  },
		  "type": {
			"type": "string",
			"enum": [
			  "dev.cdevents.foosubject.barpredicate.1.2.3"
			],
			"default": "dev.cdevents.foosubject.barpredicate.1.2.3"
		  },
		  "timestamp": {
			"type": "string",
			"format": "date-time"
		  }
		},
		"additionalProperties": false,
		"type": "object",
		"required": [
		  "version",
		  "id",
		  "source",
		  "type",
		  "timestamp"
		]
	  },
	  "subject": {
		"properties": {
		  "id": {
			"type": "string",
			"minLength": 1
		  },
		  "source": {
			"type": "string",
			"minLength": 1,
			"format": "uri-reference"
		  },
		  "type": {
			"type": "string",
			"minLength": 1,
			"enum": [
			  "fooSubject"
			],
			"default": "fooSubject"
		  },
		  "content": {
			"properties": {
			  "plainField": {
				"type": "string",
				"minLength": 1
			  },
			  "referenceField": {
				"properties": {
				  "id": {
					"type": "string",
					"minLength": 1
				  },
				  "source": {
					"type": "string",
					"minLength": 1,
					"format": "uri-reference"
				  }
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
				  "id"
				]
			  },
			  "artifactId": {
				"type": "string"
			  },
			  "objectField": {
				"properties": {
				  "required": {
					"type": "string",
					"minLength": 1
				  },
				  "optional": {
					"type": "string",
					"format": "uri-reference"
				  }
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
				  "required"
				]
			  }
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
			  "plainField",
			  "referenceField"
			]
		  }
		},
		"additionalProperties": false,
		"type": "object",
		"required": [
		  "id",
		  "type",
		  "content"
		]
	  },
	  "customData": {
		"oneOf": [
		  {
			"type": "object"
		  },
		  {
			"type": "string",
			"contentEncoding": "base64"
		  }
		]
	  },
	  "customDataContentType": {
		"type": "string"
	  }
	},
	"additionalProperties": false,
	"type": "object",
	"required": [
	  "context",
	  "subject"
	]
}`,
		"https://cdevents.dev/99.1.0/schema/foosubject-barpredicate-event": `{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://cdevents.dev/99.1.0/schema/foosubject-barpredicate-event",
	"properties": {
	  "context": {
		"properties": {
		  "version": {
			"type": "string",
			"minLength": 1
		  },
		  "id": {
			"type": "string",
			"minLength": 1
		  },
		  "source": {
			"type": "string",
			"minLength": 1,
			"format": "uri-reference"
		  },
		  "type": {
			"type": "string",
			"enum": [
			  "dev.cdevents.foosubject.barpredicate.2.2.3"
			],
			"default": "dev.cdevents.foosubject.barpredicate.2.2.3"
		  },
		  "timestamp": {
			"type": "string",
			"format": "date-time"
		  },
		  "schemaUri": {
			"type": "string",
			"minLength": 1,
			"format": "uri"
		  },
		  "chainId": {
			"type": "string",
			"minLength": 1
		  },
		  "links": {
			"$ref": "https://cdevents.dev/0.4.1/schema/links/embeddedlinksarray"
		  }
		},
		"additionalProperties": false,
		"type": "object",
		"required": [
		  "version",
		  "id",
		  "source",
		  "type",
		  "timestamp"
		]
	  },
	  "subject": {
		"properties": {
		  "id": {
			"type": "string",
			"minLength": 1
		  },
		  "source": {
			"type": "string",
			"minLength": 1,
			"format": "uri-reference"
		  },
		  "type": {
			"type": "string",
			"minLength": 1,
			"enum": [
			  "fooSubject"
			],
			"default": "fooSubject"
		  },
		  "content": {
			"properties": {
			  "plainField": {
				"type": "string",
				"minLength": 1
			  },
			  "referenceField": {
				"properties": {
				  "id": {
					"type": "string",
					"minLength": 1
				  },
				  "source": {
					"type": "string",
					"minLength": 1,
					"format": "uri-reference"
				  }
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
				  "id"
				]
			  },
			  "artifactId": {
				"type": "string"
			  },
			  "objectField": {
				"properties": {
				  "required": {
					"type": "string",
					"minLength": 1
				  },
				  "optional": {
					"type": "string",
					"format": "uri-reference"
				  }
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
				  "required"
				]
			  }
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
			  "plainField",
			  "referenceField"
			]
		  }
		},
		"additionalProperties": false,
		"type": "object",
		"required": [
		  "id",
		  "type",
		  "content"
		]
	  },
	  "customData": {
		"oneOf": [
		  {
			"type": "object"
		  },
		  {
			"type": "string",
			"contentEncoding": "base64"
		  }
		]
	  },
	  "customDataContentType": {
		"type": "string"
	  }
	},
	"additionalProperties": false,
	"type": "object",
	"required": [
	  "context",
	  "subject"
	]
}`,
	}
)

func init() {
	var err error
	testCompiler, err = newTestJsonSchemaCompiler()
	panicOnError(err)
	TestCompiledSchemas = make(map[string]*jsonschema.Schema)
	// For tests load non-test schemas first to cover links and custom
	for url := range SchemasById {
		sch, err := testCompiler.Compile(url)
		panicOnError(err)
		TestCompiledSchemas[url] = sch
	}
	for url := range TestSchemasById {
		sch, err := testCompiler.Compile(url)
		panicOnError(err)
		TestCompiledSchemas[url] = sch
	}
}

func newTestJsonSchemaCompiler() (*jsonschema.Compiler, error) {
	c, err := newJsonSchemaCompiler()
	if err != nil {
		return nil, err
	}
	for url, content := range TestSchemasById {
		var loaded map[string]interface{}
		err := json.Unmarshal([]byte(content), &loaded)
		if err != nil {
			return nil, err
		}
		if err := c.AddResource(url, loaded); err != nil {
			return nil, err
		}
	}
	return c, nil
}
