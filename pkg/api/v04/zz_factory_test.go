// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package v04_test

import (
	"github.com/cdevents/sdk-go/pkg/api"
	apiv04 "github.com/cdevents/sdk-go/pkg/api/v04"
)

func init() {
	tests = []testNewCDEventType{}
	tests = append(tests, testNewCDEventType{
		name:      "artifact deleted",
		eventType: apiv04.ArtifactDeletedEventType.String(),
		expectedEvent: &apiv04.ArtifactDeletedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ArtifactDeletedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ArtifactDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact downloaded",
		eventType: apiv04.ArtifactDownloadedEventType.String(),
		expectedEvent: &apiv04.ArtifactDownloadedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ArtifactDownloadedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ArtifactDownloadedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact packaged",
		eventType: apiv04.ArtifactPackagedEventType.String(),
		expectedEvent: &apiv04.ArtifactPackagedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ArtifactPackagedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ArtifactPackagedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact published",
		eventType: apiv04.ArtifactPublishedEventType.String(),
		expectedEvent: &apiv04.ArtifactPublishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ArtifactPublishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ArtifactPublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact signed",
		eventType: apiv04.ArtifactSignedEventType.String(),
		expectedEvent: &apiv04.ArtifactSignedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ArtifactSignedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ArtifactSignedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch created",
		eventType: apiv04.BranchCreatedEventType.String(),
		expectedEvent: &apiv04.BranchCreatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.BranchCreatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.BranchCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch deleted",
		eventType: apiv04.BranchDeletedEventType.String(),
		expectedEvent: &apiv04.BranchDeletedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.BranchDeletedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.BranchDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build finished",
		eventType: apiv04.BuildFinishedEventType.String(),
		expectedEvent: &apiv04.BuildFinishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.BuildFinishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.BuildFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build queued",
		eventType: apiv04.BuildQueuedEventType.String(),
		expectedEvent: &apiv04.BuildQueuedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.BuildQueuedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.BuildQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build started",
		eventType: apiv04.BuildStartedEventType.String(),
		expectedEvent: &apiv04.BuildStartedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.BuildStartedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.BuildStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change abandoned",
		eventType: apiv04.ChangeAbandonedEventType.String(),
		expectedEvent: &apiv04.ChangeAbandonedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ChangeAbandonedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ChangeAbandonedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change created",
		eventType: apiv04.ChangeCreatedEventType.String(),
		expectedEvent: &apiv04.ChangeCreatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ChangeCreatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ChangeCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change merged",
		eventType: apiv04.ChangeMergedEventType.String(),
		expectedEvent: &apiv04.ChangeMergedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ChangeMergedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ChangeMergedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change reviewed",
		eventType: apiv04.ChangeReviewedEventType.String(),
		expectedEvent: &apiv04.ChangeReviewedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ChangeReviewedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ChangeReviewedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change updated",
		eventType: apiv04.ChangeUpdatedEventType.String(),
		expectedEvent: &apiv04.ChangeUpdatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ChangeUpdatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ChangeUpdatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment created",
		eventType: apiv04.EnvironmentCreatedEventType.String(),
		expectedEvent: &apiv04.EnvironmentCreatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.EnvironmentCreatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.EnvironmentCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment deleted",
		eventType: apiv04.EnvironmentDeletedEventType.String(),
		expectedEvent: &apiv04.EnvironmentDeletedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.EnvironmentDeletedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.EnvironmentDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment modified",
		eventType: apiv04.EnvironmentModifiedEventType.String(),
		expectedEvent: &apiv04.EnvironmentModifiedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.EnvironmentModifiedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.EnvironmentModifiedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident detected",
		eventType: apiv04.IncidentDetectedEventType.String(),
		expectedEvent: &apiv04.IncidentDetectedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.IncidentDetectedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.IncidentDetectedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident reported",
		eventType: apiv04.IncidentReportedEventType.String(),
		expectedEvent: &apiv04.IncidentReportedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.IncidentReportedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.IncidentReportedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident resolved",
		eventType: apiv04.IncidentResolvedEventType.String(),
		expectedEvent: &apiv04.IncidentResolvedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.IncidentResolvedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.IncidentResolvedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun finished",
		eventType: apiv04.PipelineRunFinishedEventType.String(),
		expectedEvent: &apiv04.PipelineRunFinishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.PipelineRunFinishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.PipelineRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun queued",
		eventType: apiv04.PipelineRunQueuedEventType.String(),
		expectedEvent: &apiv04.PipelineRunQueuedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.PipelineRunQueuedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.PipelineRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun started",
		eventType: apiv04.PipelineRunStartedEventType.String(),
		expectedEvent: &apiv04.PipelineRunStartedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.PipelineRunStartedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.PipelineRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository created",
		eventType: apiv04.RepositoryCreatedEventType.String(),
		expectedEvent: &apiv04.RepositoryCreatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.RepositoryCreatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.RepositoryCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository deleted",
		eventType: apiv04.RepositoryDeletedEventType.String(),
		expectedEvent: &apiv04.RepositoryDeletedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.RepositoryDeletedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.RepositoryDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository modified",
		eventType: apiv04.RepositoryModifiedEventType.String(),
		expectedEvent: &apiv04.RepositoryModifiedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.RepositoryModifiedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.RepositoryModifiedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service deployed",
		eventType: apiv04.ServiceDeployedEventType.String(),
		expectedEvent: &apiv04.ServiceDeployedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ServiceDeployedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ServiceDeployedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service published",
		eventType: apiv04.ServicePublishedEventType.String(),
		expectedEvent: &apiv04.ServicePublishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ServicePublishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ServicePublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service removed",
		eventType: apiv04.ServiceRemovedEventType.String(),
		expectedEvent: &apiv04.ServiceRemovedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ServiceRemovedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ServiceRemovedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service rolledback",
		eventType: apiv04.ServiceRolledbackEventType.String(),
		expectedEvent: &apiv04.ServiceRolledbackEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ServiceRolledbackEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ServiceRolledbackSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service upgraded",
		eventType: apiv04.ServiceUpgradedEventType.String(),
		expectedEvent: &apiv04.ServiceUpgradedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.ServiceUpgradedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.ServiceUpgradedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun finished",
		eventType: apiv04.TaskRunFinishedEventType.String(),
		expectedEvent: &apiv04.TaskRunFinishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TaskRunFinishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TaskRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun started",
		eventType: apiv04.TaskRunStartedEventType.String(),
		expectedEvent: &apiv04.TaskRunStartedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TaskRunStartedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TaskRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun finished",
		eventType: apiv04.TestCaseRunFinishedEventType.String(),
		expectedEvent: &apiv04.TestCaseRunFinishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestCaseRunFinishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestCaseRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun queued",
		eventType: apiv04.TestCaseRunQueuedEventType.String(),
		expectedEvent: &apiv04.TestCaseRunQueuedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestCaseRunQueuedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestCaseRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun skipped",
		eventType: apiv04.TestCaseRunSkippedEventType.String(),
		expectedEvent: &apiv04.TestCaseRunSkippedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestCaseRunSkippedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestCaseRunSkippedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun started",
		eventType: apiv04.TestCaseRunStartedEventType.String(),
		expectedEvent: &apiv04.TestCaseRunStartedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestCaseRunStartedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestCaseRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testoutput published",
		eventType: apiv04.TestOutputPublishedEventType.String(),
		expectedEvent: &apiv04.TestOutputPublishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestOutputPublishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestOutputPublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testOutput",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun finished",
		eventType: apiv04.TestSuiteRunFinishedEventType.String(),
		expectedEvent: &apiv04.TestSuiteRunFinishedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestSuiteRunFinishedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestSuiteRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun queued",
		eventType: apiv04.TestSuiteRunQueuedEventType.String(),
		expectedEvent: &apiv04.TestSuiteRunQueuedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestSuiteRunQueuedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestSuiteRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun started",
		eventType: apiv04.TestSuiteRunStartedEventType.String(),
		expectedEvent: &apiv04.TestSuiteRunStartedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TestSuiteRunStartedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TestSuiteRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "ticket closed",
		eventType: apiv04.TicketClosedEventType.String(),
		expectedEvent: &apiv04.TicketClosedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TicketClosedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TicketClosedSubject{
				SubjectBase: api.SubjectBase{
					Type: "ticket",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "ticket created",
		eventType: apiv04.TicketCreatedEventType.String(),
		expectedEvent: &apiv04.TicketCreatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TicketCreatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TicketCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "ticket",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "ticket updated",
		eventType: apiv04.TicketUpdatedEventType.String(),
		expectedEvent: &apiv04.TicketUpdatedEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.TicketUpdatedEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.TicketUpdatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "ticket",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "custom type",
		eventType: apiv04.CustomTypeEventType.String(),
		expectedEvent: &apiv04.CustomTypeEvent{
			Context: api.ContextV04{
				Context: api.Context{
					Type:      apiv04.CustomTypeEventType,
					Timestamp: timeNow(),
					ID:        testUUID(),
					Version:   "0.4.1",
				},
			},
			Subject: apiv04.CustomTypeSubject{
				SubjectBase: api.SubjectBase{
					Type: "",
				},
			},
		},
	})
}
